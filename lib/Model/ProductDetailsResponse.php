<?php
/**
 * ProductDetailsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Axesso Api
 *
 * Use this api to fetch information to Amazon products and more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@axesso.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProductDetailsResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductDetailsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductDetailsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'response_status' => 'string',
        'response_message' => 'string',
        'product_title' => 'string',
        'manufacturer' => 'string',
        'count_review' => 'int',
        'answered_questions' => 'int',
        'product_rating' => 'string',
        'asin' => 'string',
        'size_selection' => 'string[]',
        'sold_by' => 'string',
        'fulfilled_by' => 'string',
        'warehouse_availability' => 'string',
        'retail_price' => 'float',
        'price' => 'float',
        'price_shipping_information' => 'string',
        'price_saving' => 'string',
        'features' => 'string[]',
        'prime' => 'bool',
        'product_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'response_status' => null,
        'response_message' => null,
        'product_title' => null,
        'manufacturer' => null,
        'count_review' => 'int64',
        'answered_questions' => 'int64',
        'product_rating' => null,
        'asin' => null,
        'size_selection' => null,
        'sold_by' => null,
        'fulfilled_by' => null,
        'warehouse_availability' => null,
        'retail_price' => null,
        'price' => null,
        'price_shipping_information' => null,
        'price_saving' => null,
        'features' => null,
        'prime' => null,
        'product_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response_status' => 'responseStatus',
        'response_message' => 'responseMessage',
        'product_title' => 'productTitle',
        'manufacturer' => 'manufacturer',
        'count_review' => 'countReview',
        'answered_questions' => 'answeredQuestions',
        'product_rating' => 'productRating',
        'asin' => 'asin',
        'size_selection' => 'sizeSelection',
        'sold_by' => 'soldBy',
        'fulfilled_by' => 'fulfilledBy',
        'warehouse_availability' => 'warehouseAvailability',
        'retail_price' => 'retailPrice',
        'price' => 'price',
        'price_shipping_information' => 'priceShippingInformation',
        'price_saving' => 'priceSaving',
        'features' => 'features',
        'prime' => 'prime',
        'product_description' => 'productDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response_status' => 'setResponseStatus',
        'response_message' => 'setResponseMessage',
        'product_title' => 'setProductTitle',
        'manufacturer' => 'setManufacturer',
        'count_review' => 'setCountReview',
        'answered_questions' => 'setAnsweredQuestions',
        'product_rating' => 'setProductRating',
        'asin' => 'setAsin',
        'size_selection' => 'setSizeSelection',
        'sold_by' => 'setSoldBy',
        'fulfilled_by' => 'setFulfilledBy',
        'warehouse_availability' => 'setWarehouseAvailability',
        'retail_price' => 'setRetailPrice',
        'price' => 'setPrice',
        'price_shipping_information' => 'setPriceShippingInformation',
        'price_saving' => 'setPriceSaving',
        'features' => 'setFeatures',
        'prime' => 'setPrime',
        'product_description' => 'setProductDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response_status' => 'getResponseStatus',
        'response_message' => 'getResponseMessage',
        'product_title' => 'getProductTitle',
        'manufacturer' => 'getManufacturer',
        'count_review' => 'getCountReview',
        'answered_questions' => 'getAnsweredQuestions',
        'product_rating' => 'getProductRating',
        'asin' => 'getAsin',
        'size_selection' => 'getSizeSelection',
        'sold_by' => 'getSoldBy',
        'fulfilled_by' => 'getFulfilledBy',
        'warehouse_availability' => 'getWarehouseAvailability',
        'retail_price' => 'getRetailPrice',
        'price' => 'getPrice',
        'price_shipping_information' => 'getPriceShippingInformation',
        'price_saving' => 'getPriceSaving',
        'features' => 'getFeatures',
        'prime' => 'getPrime',
        'product_description' => 'getProductDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['response_status'] = isset($data['response_status']) ? $data['response_status'] : null;
        $this->container['response_message'] = isset($data['response_message']) ? $data['response_message'] : null;
        $this->container['product_title'] = isset($data['product_title']) ? $data['product_title'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['count_review'] = isset($data['count_review']) ? $data['count_review'] : null;
        $this->container['answered_questions'] = isset($data['answered_questions']) ? $data['answered_questions'] : null;
        $this->container['product_rating'] = isset($data['product_rating']) ? $data['product_rating'] : null;
        $this->container['asin'] = isset($data['asin']) ? $data['asin'] : null;
        $this->container['size_selection'] = isset($data['size_selection']) ? $data['size_selection'] : null;
        $this->container['sold_by'] = isset($data['sold_by']) ? $data['sold_by'] : null;
        $this->container['fulfilled_by'] = isset($data['fulfilled_by']) ? $data['fulfilled_by'] : null;
        $this->container['warehouse_availability'] = isset($data['warehouse_availability']) ? $data['warehouse_availability'] : null;
        $this->container['retail_price'] = isset($data['retail_price']) ? $data['retail_price'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['price_shipping_information'] = isset($data['price_shipping_information']) ? $data['price_shipping_information'] : null;
        $this->container['price_saving'] = isset($data['price_saving']) ? $data['price_saving'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['prime'] = isset($data['prime']) ? $data['prime'] : null;
        $this->container['product_description'] = isset($data['product_description']) ? $data['product_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response_status
     *
     * @return string
     */
    public function getResponseStatus()
    {
        return $this->container['response_status'];
    }

    /**
     * Sets response_status
     *
     * @param string $response_status response_status
     *
     * @return $this
     */
    public function setResponseStatus($response_status)
    {
        $this->container['response_status'] = $response_status;

        return $this;
    }

    /**
     * Gets response_message
     *
     * @return string
     */
    public function getResponseMessage()
    {
        return $this->container['response_message'];
    }

    /**
     * Sets response_message
     *
     * @param string $response_message response_message
     *
     * @return $this
     */
    public function setResponseMessage($response_message)
    {
        $this->container['response_message'] = $response_message;

        return $this;
    }

    /**
     * Gets product_title
     *
     * @return string
     */
    public function getProductTitle()
    {
        return $this->container['product_title'];
    }

    /**
     * Sets product_title
     *
     * @param string $product_title product_title
     *
     * @return $this
     */
    public function setProductTitle($product_title)
    {
        $this->container['product_title'] = $product_title;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer manufacturer
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets count_review
     *
     * @return int
     */
    public function getCountReview()
    {
        return $this->container['count_review'];
    }

    /**
     * Sets count_review
     *
     * @param int $count_review count_review
     *
     * @return $this
     */
    public function setCountReview($count_review)
    {
        $this->container['count_review'] = $count_review;

        return $this;
    }

    /**
     * Gets answered_questions
     *
     * @return int
     */
    public function getAnsweredQuestions()
    {
        return $this->container['answered_questions'];
    }

    /**
     * Sets answered_questions
     *
     * @param int $answered_questions answered_questions
     *
     * @return $this
     */
    public function setAnsweredQuestions($answered_questions)
    {
        $this->container['answered_questions'] = $answered_questions;

        return $this;
    }

    /**
     * Gets product_rating
     *
     * @return string
     */
    public function getProductRating()
    {
        return $this->container['product_rating'];
    }

    /**
     * Sets product_rating
     *
     * @param string $product_rating product_rating
     *
     * @return $this
     */
    public function setProductRating($product_rating)
    {
        $this->container['product_rating'] = $product_rating;

        return $this;
    }

    /**
     * Gets asin
     *
     * @return string
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string $asin asin
     *
     * @return $this
     */
    public function setAsin($asin)
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets size_selection
     *
     * @return string[]
     */
    public function getSizeSelection()
    {
        return $this->container['size_selection'];
    }

    /**
     * Sets size_selection
     *
     * @param string[] $size_selection size_selection
     *
     * @return $this
     */
    public function setSizeSelection($size_selection)
    {
        $this->container['size_selection'] = $size_selection;

        return $this;
    }

    /**
     * Gets sold_by
     *
     * @return string
     */
    public function getSoldBy()
    {
        return $this->container['sold_by'];
    }

    /**
     * Sets sold_by
     *
     * @param string $sold_by sold_by
     *
     * @return $this
     */
    public function setSoldBy($sold_by)
    {
        $this->container['sold_by'] = $sold_by;

        return $this;
    }

    /**
     * Gets fulfilled_by
     *
     * @return string
     */
    public function getFulfilledBy()
    {
        return $this->container['fulfilled_by'];
    }

    /**
     * Sets fulfilled_by
     *
     * @param string $fulfilled_by fulfilled_by
     *
     * @return $this
     */
    public function setFulfilledBy($fulfilled_by)
    {
        $this->container['fulfilled_by'] = $fulfilled_by;

        return $this;
    }

    /**
     * Gets warehouse_availability
     *
     * @return string
     */
    public function getWarehouseAvailability()
    {
        return $this->container['warehouse_availability'];
    }

    /**
     * Sets warehouse_availability
     *
     * @param string $warehouse_availability warehouse_availability
     *
     * @return $this
     */
    public function setWarehouseAvailability($warehouse_availability)
    {
        $this->container['warehouse_availability'] = $warehouse_availability;

        return $this;
    }

    /**
     * Gets retail_price
     *
     * @return float
     */
    public function getRetailPrice()
    {
        return $this->container['retail_price'];
    }

    /**
     * Sets retail_price
     *
     * @param float $retail_price retail_price
     *
     * @return $this
     */
    public function setRetailPrice($retail_price)
    {
        $this->container['retail_price'] = $retail_price;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_shipping_information
     *
     * @return string
     */
    public function getPriceShippingInformation()
    {
        return $this->container['price_shipping_information'];
    }

    /**
     * Sets price_shipping_information
     *
     * @param string $price_shipping_information price_shipping_information
     *
     * @return $this
     */
    public function setPriceShippingInformation($price_shipping_information)
    {
        $this->container['price_shipping_information'] = $price_shipping_information;

        return $this;
    }

    /**
     * Gets price_saving
     *
     * @return string
     */
    public function getPriceSaving()
    {
        return $this->container['price_saving'];
    }

    /**
     * Sets price_saving
     *
     * @param string $price_saving price_saving
     *
     * @return $this
     */
    public function setPriceSaving($price_saving)
    {
        $this->container['price_saving'] = $price_saving;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features features
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets prime
     *
     * @return bool
     */
    public function getPrime()
    {
        return $this->container['prime'];
    }

    /**
     * Sets prime
     *
     * @param bool $prime prime
     *
     * @return $this
     */
    public function setPrime($prime)
    {
        $this->container['prime'] = $prime;

        return $this;
    }

    /**
     * Gets product_description
     *
     * @return string
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param string $product_description product_description
     *
     * @return $this
     */
    public function setProductDescription($product_description)
    {
        $this->container['product_description'] = $product_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


